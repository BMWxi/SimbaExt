//Define types used in SimbaExt 
{$IFDEF LAPE}
{$DEFINE SIMBAEXT}
{$X+}

type
  PInt8  = ^Int8;
  PInt16 = ^Int16;
  PInt32 = ^Int32;
  PInt64 = ^Int64;
  
  PUInt8  = ^UInt8;
  PUInt16 = ^UInt16;
  PUInt32 = ^UInt32;
  PUInt64 = ^UInt64;

  Float32 = Single;
  Float64 = Double;
  Float80 = Extended;
  PFloat32 = ^Single;
  PFloat64 = ^Double;
  PFloat80 = ^Extended;
  
  
  //Arr
  TIntArray    = TIntegerArray;
  TFloatArray  = Array of Float32;
  TDoubleArray = Array of Float64;
  TExtArray    = Array of Float80;
  
  
  //Spesific names
  TInt8Array   = Array of Int8;
  TInt16Array  = Array of Int16;
  TInt32Array  = Array of Int32;
  TInt64Array  = Array of Int64;
  TFloat32Array  = Array of Float32;
  TFloat64Array  = Array of Float64;
  TFloat80Array  = Array of Float80;
  
  
  //Array of Array ..
  (*T2DIntArray     = Array of TIntArray;*)
  T2DExtArray     = Array of TExtArray;
  T2DFloatArray   = Array of TFloatArray;
  T2DDoubleArray  = Array of TDoubleArray;
  T2DBoxArray     = Array of TBoxArray;
  
  
  //Matrix ..
  TByteMatrix   = Array of TByteArray;
  TIntMatrix    = Array of TIntArray;
  TExtMatrix    = Array of TExtArray;
  TFloatMatrix  = Array of TFloatArray;
  TDoubleMatrix = Array of TDoubleArray;

  
  //Other ..
  TColorSpace = (_LAB_, _LCH_, _XYZ_, _RGB_);
  TWarningType = (ERR_DEPRECATED, ERR_WARNING, ERR_NOTICE);
  
  TSortKey  = ( 
    sort_Default, sort_Magnitude, sort_ByColumn, sort_ByRow, sort_ByX,
    sort_ByY, sort_Length, sort_First, sort_Index, sort_Mean, sort_Lex, sort_Logical
  );
  
  
//LoadLibrary from current folder 
{$loadlib \..\includes\simbaext\simbaext.dll}
{$IFNDEF CODEINSIGHT}
{$loadlib \..\includes\simbaext\seextra.dll}
{$loadlib \..\includes\simbaext\matchTempl.dll}
{$ENDIF}

// IntToBox is to long, and [x1,y1,x2,y2] fails whenever used with a overloaded method..
{$IFNDEF AeroLib}
function ToBox(x1,y1,x2,y2: Integer): TBox;
{$ELSE}
function ToBox(x1,y1,x2,y2: Integer): TBox; override;
{$ENDIF}
begin
  Result := [x1,y1,x2,y2];
end;


function ToBox(TopLeft, BtmRight:TPoint): TBox; overload;
begin
  Result := [TopLeft.x, TopLeft.y, BtmRight.x, BtmRight.y];
end;


{!DOCREF} {
  @method: procedure RaiseWarning(WarningMessage:String; Warn: TWarningType);
  @desc: Used internally to raise a warning-message
}
procedure RaiseWarning(WarningMessage:String; Warn: TWarningType);
begin
  {$IFNDEF ERR_HIDE_ALL}
  case Warn of
    ERR_DEPRECATED: 
      begin
        {$IFNDEF ERR_HIDE_DEPRECATED}
        WriteLn('DEPRECATED: ' + WarningMessage);
        {$ENDIF}
      end;
    ERR_WARNING: 
      begin
        {$IFNDEF ERR_HIDE_WARNINGS}
          {$IFDEF ERR_REAL_EXCEPTION}
            RaiseException(erException, 'WARNING: '+WarningMessage);
          {$ELSE}
            WriteLn('WARNING: ' + WarningMessage);
          {$ENDIF}
        {$ENDIF}
      end;
    ERR_NOTICE:  
      begin    
        {$IFNDEF ERR_HIDE_NOTICE}
        WriteLn('NOTICE: ' + WarningMessage);
        {$ENDIF}
      end;
  end;
  {$ENDIF}
end;



type 
  //SE.***
  SimbaExt = type Pointer;
  //Math.***
  TObjMath = type Pointer;
  //Rand.***
  TObjRandom = type Pointer;
  //Time.***
  TObjTime = type Pointer;
  //OS.*** & OS.Path.***
  TObjOSPath = type Pointer;
  TObjOS = record path: TObjOSPath; end; 
var  
  SE: SimbaExt; 
  Math: TObjMath; 
  Rand: TObjRandom; 
  TimeUtils: TObjTime;
  OS: TObjOS;

{$include_once ObjMode/TRafikiBitmap.pas}
{$include_once ObjMode/SimbaExt_Math.pas}
{$include_once ObjMode/SimbaExt_Numeric.pas}
{$include_once ObjMode/SimbaExt_Sorting.pas}
{$include_once ObjMode/SimbaExt_Finder.pas}
{$include_once ObjMode/SimbaExt_PointTools.pas}
{$include_once ObjMode/SimbaExt_MatrixTools.pas}
{$include_once ObjMode/SimbaExt_Imaging.pas}
{$include_once ObjMode/SimbaExt_Randomize.pas}
{$include_once ObjMode/SimbaExt_StringTools.pas}
{$include_once ObjMode/SimbaExt_Time.pas}
{$include_once ObjMode/SimbaExt_OS.pas}
{$include_once ObjMode/SimbaExt_Misc.pas}
{$include_once ObjMode/SimbaExt_Std.pas}


// - Documentation:
{!DOCREF} {
  @method: type SimbaExt = type Pointer;
  @desc: Needed for the global c'var SE.'
}


{!DOCREF} {
  @method: type TObjMath = type Pointer;
  @desc: Needed for the global c'var Math.'
}


{!DOCREF} {
  @method:type TObjRandom = type Pointer;
  @desc: Needed for the global c'var Rand.'
}


{!DOCREF} {
  @method: type TObjTime = type Pointer;
  @desc: Needed for the global c'var TimeUtils.'
}


{!DOCREF} {
  @method:type TObjOS = record path: TObjOSPath; end;
  @desc: Needed for the global c'var OS.', also holds another var: c'OS.Path.'
}


{!DOCREF} {
  @method: type TObjOSPath = type Pointer;
  @desc: Needed for the global c'var OS.Path.'
}


{!DOCREF} {
  @method:Global variables
  @desc:
    [code=php]
    SE        =>  SimbaExt; 
    Math      =>  TObjMath; 
    Rand      =>  TObjRandom; 
    TimeUtils =>  TObjTime;
    OS        =>  TObjOS;
    OS.Path   =>  TObjOSPath;
    [/code]
}


{!DOCREF} {
  @method: type TColorSpace = (_LAB_, _LCH_, _XYZ_, _RGB_);
  @desc: Choise of colorspace
}

{!DOCREF} {
  @method: type TWarningType = (ERR_DEPRECATED, ERR_WARNING, ERR_NOTICE);
  @desc: Used in RaiseWarning()
}

{!DOCREF} {
  @method: type TSortKey = ...;
  @desc:
    Sorting keys, all sorting functions will support it.
    [code=pascal]
      sort_Default,         //Default to what ever type
      - TPA
      sort_Magnitude,       //Default: Sqr(A.x) + Sqr(A.y)
      sort_ByPoint,
      sort_ByColumn,
      sort_ByRow,
      sort_ByX,
      sort_ByY,
      - 2D
      sort_Length,          //Default: Array length used in 2D-sorting
      sort_First,
      sort_Index,
      sort_Mean,
      - TSA
      sort_Lex,              //Default: TStrArray Sorting
      sort_Logical
    [/code]
}


{!DOCREF} {
  @method: type TComparator = (__LT__, __GT__, __EQ__, __NE__, __GE__, __LE__);
  @desc: Choise of comperator.
}


{!DOCREF} {
  @method: TMatrix
  @desc: 
    TMatrix = a 2D array of any given type, unlike EG: T2DIntArray each column in a TMatrix should
    be the same length. So it's always W*H in size. It's resized using c'SetLength(Matrix, H,W)';
    
    Supported matrix types:
    [code=pascal]
      TByteMatrix    = T2DByteArray;
      TIntMatrix    = T2DIntArray;
      TExtMatrix    = T2DExtArray;
      TFloatMatrix  = T2DFloatArray;
      TDoubleMatrix = T2DDoubleArray;
    [/code]
}


{$X-}
{$ENDIF}
