//Define types used in SimbaExt
{$IFDEF LAPE}
type
  TIntArray = TIntegerArray;
  
  TExtArray   = TExtendedArray;
  T2DExtArray = T2DExtendedArray;
  
  //Float = Single;
  TFloatArray   = Array of Single;
  T2DFloatArray = Array of TFloatArray;
  
  TDoubleArray   = Array of Double;
  T2DDoubleArray = Array of TDoubleArray;
  
  TMatchAlgo = (_LAB_, _LCH_, _XYZ_, _RGB_);
  TWarningType = (ERR_DEPRECATED, ERR_WARNING, ERR_NOTICE);
  
  //Sorting methods
  TSortKey  = ( sort_Default,   //Default to what ever type.
                //sort_Weight,
                {TPA}
                sort_Magnitude, //Default: Sqr(A.x) + Sqr(A.y)
                sort_ByPoint,
                sort_ByColumn,
                sort_ByRow,
                sort_ByX,
                sort_ByY,
                {2D - including TSA}
                sort_Length,    //Default: Array length used in 2D-sorting
                sort_First,
                sort_Index,
                {2D TPA spesific}
                sort_Mean,
                {TSA}
                sort_Alpha      //Default: TStrArray Sorting
              );
  
//LoadLibrary from current folder 
{$loadlib \..\includes\simbaext\simbaext.dll}
{$loadlib \..\includes\simbaext\seextra.dll}

// IntToBox is to long, and [x1,y1,x2,y2] does not always work..
function ToBox(x1,y1,x2,y2: Integer): TBox; overload;
begin
  Result := [x1,y1,x2,y2];
end;


function ToBox(TopLeft, BtmRight:TPoint): TBox; overload;
begin
  Result := [TopLeft.x, TopLeft.y, BtmRight.x, BtmRight.y];
end;


procedure RaiseWarning(WarningMessage:String; Warn: TWarningType);
begin
  {$IFNDEF ERR_HIDE_ALL}
  case Warn of
    ERR_DEPRECATED: 
      begin
        {$IFNDEF ERR_HIDE_DEPRECATED}
        WriteLn('DEPRECATED: ' + WarningMessage);
        {$ENDIF}
      end;
    ERR_WARNING: 
      begin
        {$IFNDEF ERR_HIDE_WARNINGS}
          {$IFDEF ERR_REAL_EXCEPTION}
            RaiseException('WARNING: ' + WarningMessage);
          {$ELSE}
            WriteLn('WARNING: ' + WarningMessage);
          {$ENDIF}
        {$ENDIF}
      end;
    ERR_NOTICE:  
      begin    
        {$IFNDEF ERR_HIDE_NOTICE}
        WriteLn('NOTICE: ' + WarningMessage);
        {$ENDIF}
      end;
  end;
  {$ENDIF}
end;


{$IFDEF SE_LEGACY}
  {$include_once LegacyMode/SimbaExt_Math.pas}
  {$include_once LegacyMode/SimbaExt_Numeric.pas}
  {$include_once LegacyMode/SimbaExt_Sorting.pas}
  {$include_once LegacyMode/SimbaExt_Finder.pas}
  {$include_once LegacyMode/SimbaExt_PointTools.pas}
  {$include_once LegacyMode/SimbaExt_MatrixTools.pas}
  {$include_once LegacyMode/SimbaExt_Imaging.pas}
  {$include_once LegacyMode/SimbaExt_Randomize.pas}
  {$include_once LegacyMode/SimbaExt_StringTools.pas}
  {$IFNDEF SE_NoMisc} {$include_once LegacyMode/SimbaExt_Misc.pas} {$ENDIF}
  {$include_once LegacyMode/TRafikiBitmap.pas}
  {$include_once LegacyMode/SimbaExt_SimpleOCR.pas}
{$ELSE}
  type 
    //SE.***
    SimbaExt = type Pointer;
    //Math.***
    TObjMath = type Pointer;
    //Rand.***
    TObjRandom = type Pointer;
    //Time.***
    TObjTime = type Pointer;
    //OS.*** & OS.Path.***
    TObjOSPath = type Pointer;
    TObjOS = record path: TObjOSPath; end; 
  var  
    SE: SimbaExt; 
    Math: TObjMath; 
    Rand: TObjRandom; 
    TimeUtils: TObjTime;
    OS: TObjOS;
  
  {$include_once ObjMode/SimbaExt_Math.pas}
  {$include_once ObjMode/SimbaExt_Numeric.pas}
  {$include_once ObjMode/SimbaExt_Sorting.pas}
  {$include_once ObjMode/SimbaExt_Finder.pas}
  {$include_once ObjMode/SimbaExt_PointTools.pas}
  {$include_once ObjMode/SimbaExt_MatrixTools.pas}
  {$include_once ObjMode/SimbaExt_Imaging.pas}
  {$include_once ObjMode/SimbaExt_Randomize.pas}
  {$include_once ObjMode/SimbaExt_StringTools.pas}
  {$include_once ObjMode/SimbaExt_Time.pas}
  {$include_once ObjMode/SimbaExt_OS.pas}
  {$IFNDEF SE_NoMisc} {$include_once ObjMode/SimbaExt_Misc.pas} {$ENDIF}
  {$include_once ObjMode/TRafikiBitmap.pas}
{$ENDIF}

{$ENDIF}
